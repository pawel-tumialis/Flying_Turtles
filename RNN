# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
import tensorflow as tf
import numpy as np
from tensorflow import keras


unit_1 = 10
unit_2 = 20
unit_3 = 30

i1 = 32
i2 = 64
i3 = 32
batch_size = 64
num_batches = 100
timestep = 50


class NestedCell(keras.layers.Layer):
        def __init__(self, unit_1, unit_2, unit_3, **kwargs):
            self.unit_1 = unit_1
            self.unit_2 = unit_2
            self.unit_3 = unit_3
            self.state_size = [tf.TensorShape([unit_1]), tf.TensorShape([unit_2, unit_3])]
            self.output_size = [tf.TensorShape([unit_1]), tf.TensorShape([unit_2, unit_3])]
            super(NestedCell, self).__init__(**kwargs)

        def build(self, input_shapes):
            # expect input_shape to contain 2 items, [(batch, i1), (batch, i2, i3)]
            i1 = input_shapes[0][1]
            i2 = input_shapes[1][1]
            i3 = input_shapes[1][2]

            self.kernel_1 = self.add_weight(
                shape=(i1, self.unit_1), initializer="uniform", name="kernel_1"
            )
            self.kernel_2_3 = self.add_weight(
                shape=(i2, i3, self.unit_2, self.unit_3),
                initializer="uniform",
                name="kernel_2_3",
            )

        def call(self, inputs, states):
            # inputs should be in [(batch, input_1), (batch, input_2, input_3)]
            # state should be in shape [(batch, unit_1), (batch, unit_2, unit_3)]
            input_1, input_2 = tf.nest.flatten(inputs)
            s1, s2 = states

            output_1 = tf.matmul(input_1, self.kernel_1)
            output_2_3 = tf.einsum("bij,ijkl->bkl", input_2, self.kernel_2_3)
            state_1 = s1 + output_1
            state_2_3 = s2 + output_2_3

            output = (output_1, output_2_3)
            new_states = (state_1, state_2_3)

            return output, new_states

        def get_config(self):
            return {"unit_1": self.unit_1, "unit_2": self.unit_2, "unit_3": self.unit_3}




cell = NestedCell(unit_1, unit_2, unit_3)
rnn = keras.layers.RNN(cell)

input_1 = keras.Input((None, i1))
input_2 = keras.Input((None, i2, i3))

outputs = rnn((input_1, input_2))

model = keras.models.Model([input_1, input_2], outputs)

model.compile(optimizer="adam", loss="mse", metrics=["accuracy"])

input_1_data = np.random.random((batch_size * num_batches, timestep, i1))
input_2_data = np.random.random((batch_size * num_batches, timestep, i2, i3))
target_1_data = np.random.random((batch_size * num_batches, unit_1))
target_2_data = np.random.random((batch_size * num_batches, unit_2, unit_3))
input_data = [input_1_data, input_2_data]
target_data = [target_1_data, target_2_data]

model.fit(input_data, target_data, batch_size=batch_size)

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
